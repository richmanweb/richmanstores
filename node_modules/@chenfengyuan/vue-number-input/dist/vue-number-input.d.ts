declare const _default: import("vue").DefineComponent<{
    attrs: {
        type: ObjectConstructor;
        default: undefined;
    };
    center: BooleanConstructor;
    controls: BooleanConstructor;
    disabled: BooleanConstructor;
    inputtable: {
        type: BooleanConstructor;
        default: boolean;
    };
    inline: BooleanConstructor;
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    readonly: BooleanConstructor;
    rounded: BooleanConstructor;
    size: {
        type: StringConstructor;
        default: undefined;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
}, unknown, {
    value: number;
}, {
    /**
     * Indicate if the value is increasable.
     * @returns {boolean} Return `true` if it is decreasable, else `false`.
     */
    increasable(): boolean;
    /**
     * Indicate if the value is decreasable.
     * @returns {boolean} Return `true` if it is decreasable, else `false`.
     */
    decreasable(): boolean;
}, {
    isNaN: (number: unknown) => boolean;
    /**
     * Change event handler.
     * @param {string} value - The new value.
     */
    change(event: any): void;
    /**
     * Paste event handler.
     * @param {Event} event - Event object.
     */
    paste(event: ClipboardEvent): void;
    /**
     * Decrease the value.
     */
    decrease(): void;
    /**
     * Increase the value.
     */
    increase(): void;
    /**
     * Set new value and dispatch change event.
     * @param {number} value - The new value to set.
     */
    setValue(value: number): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attrs: {
        type: ObjectConstructor;
        default: undefined;
    };
    center: BooleanConstructor;
    controls: BooleanConstructor;
    disabled: BooleanConstructor;
    inputtable: {
        type: BooleanConstructor;
        default: boolean;
    };
    inline: BooleanConstructor;
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    readonly: BooleanConstructor;
    rounded: BooleanConstructor;
    size: {
        type: StringConstructor;
        default: undefined;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number;
    name: string;
    attrs: Record<string, any>;
    center: boolean;
    controls: boolean;
    disabled: boolean;
    inputtable: boolean;
    inline: boolean;
    max: number;
    min: number;
    placeholder: string;
    readonly: boolean;
    rounded: boolean;
    size: string;
    step: number;
}>;
export default _default;
